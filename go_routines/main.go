package main

import (
	"fmt"
	"time"
)
func normal(s []int) int {
	sum := 0
	for _, v := range s {
		sum += v
	}
	return sum
}

func sum(s []int, ch chan int) {
	sum := 0
	for _, v := range s {
		sum += v
	}
	ch <- sum
}
func main() {
	//go routines inside a code

	//we can see two examples here
	//summing elements inside a function using a go routine or a normal function
	start := int64(time.Millisecond)
	ch := make(chan int) //we can also add a second argument to this which is the buffer
	// see slide 3 on that
	nums := []int{10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,10, 20, 30, 40, 50,}
	go sum(nums[:len(nums)/2], ch)
	go sum(nums[len(nums)/2:], ch)

	//like you get the concept doe right?
	x := <-ch
	y := <-ch
	fmt.Println(x+y, int64(time.Millisecond) - start)
	another_start := time.Now()
	_sum := normal(nums)
	fmt.Println(_sum, time.Since(another_start))

	c := make(chan int, 100)
	for i := 0; i<98; i ++ { //try making it more than the buffer
		c <- i
	}
	// c <- 1
	// c <- 2
	// xx := 0
	// for xx < 100 { try making it more than the buffer
	// 	fmt.Println(<-ch)
	// 	xx++
	// }
	//instead of this we can also do:
	// for i := range c {
	// 	fmt.Println(i)
	// }

	//to close a channel we can simply do close(c)
	//select tnsh kebdohal engedih tchelewaleh

	//select case statements

	//before todays session read somethign about stringers functions that fmts read whenever called


// package main

// import "golang.org/x/tour/tree"

// Walk walks the tree t sending all values
// from the tree to the channel ch.
// func Walk(t *tree.Tree, ch chan int) {
	
// 	if t == nil {
// 		return
// 	}
// 	Walk(t.Left, ch)
// 	ch <- t.Value
// 	Walk(t.Right, ch)
// }
// func Same(t1, t2 *tree.Tree) bool {
// 	ch1 := make(chan int, 10)
// 	ch2 := make(chan int, 10)
// 	go Walk(t1, ch1)
// 	go Walk(t2, ch2)
// 	i := 0
// 	for i < cap(ch1) {
// 		val1 := <-ch1
// 		val2 := <-ch2
// 		if  val1 != val2 {
// 			return false
// 		}
	//i++
// 	}
// 	return true
// }

// func main() {
// 	Same(tree.New(1), tree.New(2))
// }


}